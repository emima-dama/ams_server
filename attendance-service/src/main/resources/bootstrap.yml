spring:
  application:
    name: attendance-service
  datasource:
    url: jdbc:postgresql://postgres-attendance:5432/attendance-db
    username: attendance
    password: ams
    driver-class-name: org.postgresql.Driver
  cloud:
    config:
      uri: http://config-service:8888 # where the config-server is running
      fail-fast: true #the service will not run if it can't reach the config-service
      username: user #username of the config-service
      password: amsConfigServerPassword #password of the config-service
eureka:
  instance:
    instance-id: ${spring.cloud.client.hostname}:${spring.application.name}:${random.int[1,999999]}
    prefer-ip-address: true  #when the application registers with eureka, it uses its IP address rather than its hostname
  client:
    register-with-eureka: true #tells the built-in eureka client to not register itself with eureka, because we should act as a server
    fetch-registry: true

separator.barcode : "--"

management:
    enable: false
  endpoints:
    web:
      base-path: /attendance-actuator
      exposure:
        include: health, shutdown, prometheus, metrics
  endpoint:
    shutdown:
      enable: true
  #    health:
  #      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
    use-global-registry: false
    web:
      server:
        request:
          autotime:
            enabled: true   #Auto-configuration enables the instrumentation of all requests handled by Spring MVC
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
      sla:
        http:
          server:
            requests: 100ms,150ms,250ms,500ms,1s